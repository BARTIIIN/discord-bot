import { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField } from 'discord.js';// Sta³a: próg zg³oszeñ do banaconst BAN_THRESHOLD = 10;// Interfejsy dla danych u¿ytkownikaconst userData = new Map();const client = new Client({    intents: [        GatewayIntentBits.Guilds,        GatewayIntentBits.GuildMessages,        GatewayIntentBits.MessageContent,        GatewayIntentBits.GuildMembers    ]});// Obs³uga komendy !@ (panel zarz¹dzania u¿ytkownikiem)client.on('messageCreate', async (message) => {    if (message.content.startsWith('!@')) {        const mentionedUser = message.mentions.users.first() || message.guild?.members.cache.get(message.content.split(' ')[1]);        if (!mentionedUser) {            message.reply('Nie znaleziono u¿ytkownika!');            return;        }        const userInfo = userData.get(mentionedUser.id) || {            warnings: [],            mutes: 0,            flaggedAsUnverified: false,            reports: new Set()        };        const embed = new EmbedBuilder()            .setColor('#0099ff')            .setTitle(`Informacje o ${mentionedUser.tag}`)            .addFields(                { name: 'Liczba warnów', value: userInfo.warnings.length.toString(), inline: true },                { name: 'Liczba mutów', value: userInfo.mutes.toString(), inline: true },                { name: 'Liczba zg³oszeñ', value: userInfo.reports.size.toString(), inline: true }            );        if (userInfo.warnings.length > 0) {            embed.addFields({                name: 'Ostatnie warny',                value: userInfo.warnings.map(w => `Powód: ${w.reason}, Wydane przez: ${w.issuedBy}, Data: ${w.date}`).join('\n\n')            });        }        const row = new ActionRowBuilder()            .addComponents(                new ButtonBuilder()                    .setCustomId(`warn_${mentionedUser.id}`)                    .setLabel('Warn')                    .setStyle(ButtonStyle.Danger),                new ButtonBuilder()                    .setCustomId(`mute_${mentionedUser.id}`)                    .setLabel('Mute')                    .setStyle(ButtonStyle.Secondary),                new ButtonBuilder()                    .setCustomId(`report_${mentionedUser.id}`)                    .setLabel('Zg³oœ')                    .setStyle(ButtonStyle.Primary)            );        await message.reply({ embeds: [embed], components: [row] });    }});// Obs³uga przycisków w paneluclient.on('interactionCreate', async (interaction) => {    if (!interaction.isButton()) return;    const [action, targetUserId] = interaction.customId.split('_');    const targetUser = interaction.guild.members.cache.get(targetUserId)?.user;    if (!targetUser) {        await interaction.reply({ content: 'Nie znaleziono u¿ytkownika!', ephemeral: true });        return;    }    const userInfo = userData.get(targetUserId) || {        warnings: [],        mutes: 0,        flaggedAsUnverified: false,        reports: new Set()    };    switch (action) {        case 'warn': {            const reason = 'Przyk³adowy powód'; // Mo¿esz dodaæ modal do wpisania powodu            userInfo.warnings.push({                reason,                issuedBy: interaction.user.tag,                date: new Date().toLocaleString()            });            userData.set(targetUserId, userInfo);            await interaction.reply(`U¿ytkownik ${targetUser.tag} otrzyma³ ostrze¿enie: ${reason}`);            break;        }        case 'mute': {            if (!interaction.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {                await interaction.reply({ content: 'Nie masz uprawnieñ do wyciszania u¿ytkowników!', ephemeral: true });                return;            }            const muteRole = interaction.guild.roles.cache.find(r => r.name === 'Muted');            if (!muteRole) {                await interaction.reply({ content: 'Rola "Muted" nie zosta³a znaleziona!', ephemeral: true });                return;            }            const member = interaction.guild.members.cache.get(targetUserId);            if (member) {                await member.roles.add(muteRole, 'Mute przez bota');                userInfo.mutes += 1;                userData.set(targetUserId, userInfo);                await interaction.reply(`U¿ytkownik ${targetUser.tag} zosta³ wyciszony.`);            } else {                await interaction.reply('Nie znaleziono u¿ytkownika na serwerze.');            }            break;        }        case 'report': {            if (userInfo.reports.has(interaction.user.id)) {                await interaction.reply({ content: 'Ju¿ zg³osi³eœ tego u¿ytkownika!', ephemeral: true });                return;            }            userInfo.reports.add(interaction.user.id);            userData.set(targetUserId, userInfo);            await interaction.reply(`Zg³osi³eœ u¿ytkownika ${targetUser.tag}. Liczba zg³oszeñ: ${userInfo.reports.size}/${BAN_THRESHOLD}`);            if (userInfo.reports.size >= BAN_THRESHOLD) {                try {                    await interaction.guild.members.ban(targetUserId, { reason: 'Przekroczenie progu zg³oszeñ.' });                    await interaction.followUp(`U¿ytkownik ${targetUser.tag} zosta³ zbanowany za przekroczenie limitu zg³oszeñ.`);                } catch (error) {                    console.error(`Nie uda³o siê zbanowaæ u¿ytkownika: ${error}`);                }            }            break;        }    }});// Logowanie botaclient.login('MTMzMjk0MDgyMjgzMTY5NzkzMA.GI2nnU.xgXOIq-o9ytmULSb__7u-BMqpInMv-5qgBeFa8');